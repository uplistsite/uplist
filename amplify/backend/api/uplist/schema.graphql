type User
@model
@key(fields: ["owner"])
@auth(
    rules: [
        { allow: owner, operations: [read] },
        { allow: groups, groups: ["Admin"], operations: [read] },
    ])
{
    owner: String!,
    addresses: [Address] @connection(keyName: "byOwner", fields: ["owner"]),
    items: [Item] @connection(keyName: "byOwner", fields: ["owner"])
}

type Address
@model
@key(name: "byOwner", fields: ["owner", "addressLine1", "addressLine2", "city", "postalCode", "state", "country"])
@auth(
    rules: [
        { allow: owner },
        { allow: groups, groups: ["Admin"], operations: [read] },
    ])
{
    id: ID!,
    owner: String,
    addressLine1: String!,
    addressLine2: String,
    city: String!,
    postalCode: String!,
    state: String!,
    country: String!
}

type Item
@model
@key(name: "byOwner", fields: ["owner", "id", "name", "description", "year", "make", "model", "totalPrice"])
@key(name: "byId", fields: ["id", "name", "description", "year", "make", "model" "totalPrice"])
@auth(
    rules: [
        { allow: owner, operations: [create, read, update] },
        { allow: groups, groups: ["Admin"] },
    ])
{
    id: ID!,
    owner: String,
    name: String!,
    description: String,
    year: Int,
    make: String,
    model: String,
    address: Address @connection,
    totalPrice: Float,
    lineItems: [LineItem] @connection(keyName: "byItem", fields: ["id"])
    appraisals: [Appraisal] @connection(keyName: "byItem", fields: ["id"])
}

type LineItem
@model
@key(name: "byItem", fields: ["itemId", "id", "quantity", "notes", "unitPrice", "wear"])
@auth(
    rules: [
        { allow: owner, operations: [create, read, update] },
        { allow: groups, groups: ["Admin"] },
    ]
)
{
    id: ID!,
    owner: String,
    itemId: ID!,
    quantity: Int,
    notes: String,
    unitPrice: Float,
    wear: Wear,
}

type ProductCategory
@model
@auth(
    rules: [
        { allow: owner, operations: [read] },
        { allow: groups, groups: ["Admin"] },
    ])
{
    id: ID!,
    name: String!,
    code: Int!,
    description: String,
    parentCode: ProductCategory @connection
}

type Appraisal
@model
@key(name: "byId", fields: ["id", "status", "comments", "amountUpfront", "amountRangeHigh", "amountRangeLow"])
@key(name: "byItem", fields: ["itemId", "id", "status", "comments", "amountUpfront", "amountRangeHigh", "amountRangeLow"])
@key(name: "byVendor", fields: ["vendorId", "itemId", "id", "status", "comments", "amountUpfront", "amountRangeHigh", "amountRangeLow"])
@auth(
    rules: [
        { allow: owner, operations: [read] },
        { allow: groups, groups: ["Admin"] },
    ])
{
    id: ID!,
    owner: String,
    itemId: ID!,
    item: Item @connection(fields: ["itemId"])
    status: AppraisalStatus!,
    comments: String,
    amountUpfront: Float,
    amountRangeHigh: Float,
    amountRangeLow: Float,
    vendorId: ID!,
    vendor: Vendor @connection(fields: ["vendorId"]),
    pickups: [Pickup] @connection(keyName: "byAppraisal", fields: ["id"])
}

type Pickup
@model
@key(name: "byAppraisal", fields: ["appraisalId", "id", "employeeId"])
@auth(
    rules: [
        { allow: owner, operations: [read] },
        { allow: groups, groups: ["Admin"] },
    ])
{
    id: ID!,
    owner: String,
    appraisalId: ID!,
    appraisal: Appraisal @connection(fields: ["appraisalId"]),
    employeeId: ID!,
    employee: Employee @connection(fields: ["employeeId"])
}

type Vendor
@model
@auth(
    rules: [
        { allow: owner, operations: [read] },
        { allow: groups, groups: ["Admin"] },
    ])
{
    id: ID!,
    owner: String,
    name: String,
    description: String,
    group: String,
    employees: [Employee] @connection(keyName: "byVendor", fields: ["id"])
}

type Employee
@model
@key(name: "byVendor", fields: ["vendorId", "id", "firstName", "lastName"])
@auth(
    rules: [
        { allow: owner, operations: [read] },
        { allow: groups, groups: ["Admin"] },
    ])
{
    id: ID!,
    owner: String,
    firstName: String!,
    lastName: String!,
    vendorId: ID!,
    schedules: [Schedule] @connection(keyName: "byEmployee", fields: ["id"])
}

type Schedule
@model
@key(name: "byEmployee", fields: ["employeeId", "from", "to"])
@auth(
    rules: [
        { allow: owner, operations: [read] },
        { allow: groups, groups: ["Admin"] }
    ])
{
    id: ID!,
    owner: String,
    employeeId: ID!,
    from: AWSDateTime!,
    to: AWSDateTime!
}

type S3Object
@model
@auth(
    rules: [
        { allow: owner, operations: [read] },
        { allow: groups, groups: ["Admin"] }
    ])
{
    id: ID!,
    owner: String,
    key: String!
}

type S3ObjectJoin
@model
@key(fields: ["s3ObjectId", "foreignKey"])
@key(name: "byForiegnKey", fields: ["foreignKey", "s3ObjectId"])
@auth(
    rules: [
        { allow: owner, operations: [read] },
        { allow: groups, groups: ["Admin"] }
    ])
{
    s3ObjectId: ID!,
    s3Object: S3Object @connection(fields: ["s3ObjectId"])
    foreignKey: String!
}

enum EmployeeStatus {
    ACTIVE,
    INACTIVE
}

enum AppraisalStatus {
    PENDING,
    ACCEPTED
}

enum Wear {
    POOR,
    WELL_USED,
    USED,
    LIGHTLY_USED,
    LIKE_NEW,
    NEW
}