type User
@model
@auth(
    rules: [
      { allow: owner, operations: [read] },
      { allow: groups, groups: ["Admin"] },
    ])
{
  id: ID!,
  owner: String,
  balance: Float
    @auth(
        rules: [
          { allow: owner, operations: [read] },
          { allow: groups, groups: ["Admin"], operations: [create, update, read] }
        ])
}

type Appraisal
@model
@auth(
    rules: [
      { allow: owner, operations: [create, update, delete, read] },
      { allow: groups, groups: ["Admin"] },
    ])
{
  id: ID!,
  owner: String,
  name: String!,
  description: String!,
  pictures: [S3Object] @connection(keyName: "byAppraisal", fields: ["id"]),
  appraisalUserStatus: AppraisalUserStatus,
  paymentAdvance: Float
    @auth(
        rules: [
          { allow: owner, operations: [read] },
          { allow: groups, groups: ["Admin"], operations: [create, update, read] }
        ]),
  paymentRangeLow: Float
    @auth(
        rules: [
            { allow: owner, operations: [read] },
            { allow: groups, groups: ["Admin"], operations: [create, update, read] }
        ]),
  paymentRangeHigh: Float
    @auth(
        rules: [
            { allow: owner, operations: [read] },
            { allow: groups, groups: ["Admin"], operations: [create, update, read] }
        ]),
  defects: String,
  year: String,
  model: String,
  make: String,
  wear: Wear,
  appraisalAdminStatus: AppraisalAdminStatus
    @auth(
        rules: [
          { allow: owner, operations: [read] },
          { allow: groups, groups: ["Admin"], operations: [create, update, read] }
        ])
}

type S3Object
@model
@key(name: "byAppraisal", fields: ["foreignId", "key"])
@auth(
    rules: [
      { allow: owner },
      { allow: groups, groups: ["Admin"] },
    ])
{
    id: ID!,
    foreignId: ID!,
    key: String!
}

enum AppraisalUserStatus {
    CREATED,
    WITHDRAWN
}

enum AppraisalAdminStatus {
    APPROVED,
    DENIED,
    PROCESSING,
    LIST,
    SOLD
}

enum Wear {
    POOR,
    WELL_USED,
    USED,
    LIGHTLY_USED,
    LIKE_NEW,
    NEW
}